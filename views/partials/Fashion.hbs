<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Virtual Outfit Room</title>
    <style>
 
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .human-figure {
            width: 100%;
            height: 400px;
            background-color: #eee;
            position: relative;
            margin-bottom: 20px;
            border-radius: 5px;
            overflow: hidden;
        }
        .figure-silhouette {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        .control-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input[type="range"] {
            width: 100%;
        }
        .measurement-value {
            display: inline-block;
            width: 50px;
            text-align: right;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }
        button:hover {
            background-color: #45a049;
        }
        .results {
            margin-top: 20px;
            padding: 15px;
            background-color: #e9f7ef;
            border-radius: 5px;
            display: none;
        }
        .results h3 {
            margin-top: 0;
        }
        #dress-container {
            margin-top: 20px;
            padding: 15px;
            background-color: #e6f7ff;
            border-radius: 5px;
            display: none;
        }
        .dress-item {
            display: flex;
            margin-bottom: 15px;
            padding: 10px;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .dress-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 15px;
        }
        .dress-info {
            flex: 1;
        }
        #loading-indicator {
            display: none;
            color: #4CAF50;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Virtual Outfit Room</h1>
        <p>Adjust the measurements below using the sliders to customize your outfit.</p>
        
        <div class="human-figure">
            <svg class="figure-silhouette" width="200" height="350" viewBox="0 0 200 350" id="human-svg">
                <!-- Head -->
                <circle cx="100" cy="50" r="30" fill="#ddd" />
                
                <!-- Body -->
                <rect x="80" y="80" width="40" height="100" fill="#ddd" id="torso" />
                
                <!-- Arms -->
                <rect x="45" y="85" width="35" height="15" fill="#ddd" id="left-shoulder" />
                <rect x="120" y="85" width="35" height="15" fill="#ddd" id="right-shoulder" />
                
                <rect x="45" y="85" width="15" height="80" fill="#ddd" id="left-arm" />
                <rect x="140" y="85" width="15" height="80" fill="#ddd" id="right-arm" />
                
                <!-- Legs -->
                <rect x="80" y="180" width="15" height="110" fill="#ddd" id="left-leg" />
                <rect x="105" y="180" width="15" height="110" fill="#ddd" id="right-leg" />
                
                <!-- Measurements indicators -->
                <line x1="50" y1="120" x2="150" y2="120" stroke="red" stroke-width="1" stroke-dasharray="5,5" id="chest-line" />
                <line x1="50" y1="150" x2="150" y2="150" stroke="blue" stroke-width="1" stroke-dasharray="5,5" id="waist-line" />
                <line x1="65" y1="210" x2="135" y2="210" stroke="green" stroke-width="1" stroke-dasharray="5,5" id="hip-line" />
            </svg>
        </div>
        
        <div class="controls">
            <div>
                <div class="control-group">
                    <label for="height">Height (cm):</label>
                    <input type="range" id="height" min="150" max="200" value="170" step="1">
                    <span class="measurement-value" id="height-value">170</span> cm
                </div>
                
                <div class="control-group">
                    <label for="chest">Chest (cm):</label>
                    <input type="range" id="chest" min="70" max="120" value="90" step="1">
                    <span class="measurement-value" id="chest-value">90</span> cm
                </div>
                
                <div class="control-group">
                    <label for="waist">Waist (cm):</label>
                    <input type="range" id="waist" min="60" max="110" value="80" step="1">
                    <span class="measurement-value" id="waist-value">80</span> cm
                </div>
            </div>
            
            <div>
                <div class="control-group">
                    <label for="hip">Hip (cm):</label>
                    <input type="range" id="hip" min="70" max="120" value="90" step="1">
                    <span class="measurement-value" id="hip-value">90</span> cm
                </div>
                
                <div class="control-group">
                    <label for="shoulder">Shoulder Width (cm):</label>
                    <input type="range" id="shoulder" min="30" max="60" value="45" step="1">
                    <span class="measurement-value" id="shoulder-value">45</span> cm
                </div>
                
                <div class="control-group">
                    <label for="inseam">Inseam (cm):</label>
                    <input type="range" id="inseam" min="60" max="90" value="75" step="1">
                    <span class="measurement-value" id="inseam-value">75</span> cm
                </div>
            </div>
        </div>
        
        <button id="submit-btn">Submit Measurements</button>
        <div id="loading-indicator">Loading dress recommendations...</div>
        
        <div class="results" id="results-container">
            <h3>Your Measurements:</h3>
            <div id="results-content"></div>
        </div>

        <div id="dress-container">
            <h3>Recommended Dresses for Your Size:</h3>
            <div id="dress-content"></div>
        </div>
        
        <a href="" class="btn btn-warning">Suggest Me Next Time</a>
    </div>

    <script>
        // Get all slider elements
        const heightSlider = document.getElementById('height');
        const chestSlider = document.getElementById('chest');
        const waistSlider = document.getElementById('waist');
        const hipSlider = document.getElementById('hip');
        const shoulderSlider = document.getElementById('shoulder');
        const inseamSlider = document.getElementById('inseam');
        
        // Get all value display elements
        const heightValue = document.getElementById('height-value');
        const chestValue = document.getElementById('chest-value');
        const waistValue = document.getElementById('waist-value');
        const hipValue = document.getElementById('hip-value');
        const shoulderValue = document.getElementById('shoulder-value');
        const inseamValue = document.getElementById('inseam-value');
        
        // Get SVG elements
        const humanSvg = document.getElementById('human-svg');
        const torso = document.getElementById('torso');
        const leftShoulder = document.getElementById('left-shoulder');
        const rightShoulder = document.getElementById('right-shoulder');
        const leftArm = document.getElementById('left-arm');
        const rightArm = document.getElementById('right-arm');
        const leftLeg = document.getElementById('left-leg');
        const rightLeg = document.getElementById('right-leg');
        const chestLine = document.getElementById('chest-line');
        const waistLine = document.getElementById('waist-line');
        const hipLine = document.getElementById('hip-line');
        
        // Update functions
        function updateHeight() {
            const height = heightSlider.value;
            heightValue.textContent = height;
            
            // Update SVG height
            const scaleFactor = height / 170;
            humanSvg.setAttribute('height', 350 * scaleFactor);
            
            // Update inseam based on height
            const newInseam = Math.round(height * 0.45);
            if (inseamSlider.value != newInseam) {
                inseamSlider.value = newInseam;
                inseamValue.textContent = newInseam;
                updateInseam();
            }
        }
        
        function updateChest() {
            const chest = chestSlider.value;
            chestValue.textContent = chest;
            
            // Update torso width
            const baseWidth = 40;
            const widthChange = (chest - 90) * 0.4;
            torso.setAttribute('width', baseWidth + widthChange);
            torso.setAttribute('x', 100 - (baseWidth + widthChange) / 2);
            
            // Update chest line
            chestLine.setAttribute('x1', 50 - widthChange / 2);
            chestLine.setAttribute('x2', 150 + widthChange / 2);
        }
        
        function updateWaist() {
            const waist = waistSlider.value;
            waistValue.textContent = waist;
            
            // Update waist line
            const baseWidth = 100;
            const widthChange = (waist - 80) * 0.5;
            waistLine.setAttribute('x1', 50 - widthChange / 2);
            waistLine.setAttribute('x2', 150 + widthChange / 2);
        }
        
        function updateHip() {
            const hip = hipSlider.value;
            hipValue.textContent = hip;
            
            // Update hip line
            const baseWidth = 70;
            const widthChange = (hip - 90) * 0.5;
            hipLine.setAttribute('x1', 65 - widthChange / 2);
            hipLine.setAttribute('x2', 135 + widthChange / 2);
        }
        
        function updateShoulder() {
            const shoulder = shoulderSlider.value;
            shoulderValue.textContent = shoulder;
            
            // Update shoulder width
            const baseWidth = 35;
            const widthChange = (shoulder - 45) * 0.7;
            
            leftShoulder.setAttribute('width', baseWidth + widthChange);
            leftShoulder.setAttribute('x', 45 - widthChange);
            
            rightShoulder.setAttribute('width', baseWidth + widthChange);
            
            leftArm.setAttribute('x', 45 - widthChange);
            rightArm.setAttribute('x', 120 + baseWidth + widthChange - 15);
        }
        
        function updateInseam() {
            const inseam = inseamSlider.value;
            inseamValue.textContent = inseam;
            
            // Update leg length
            const baseLength = 110;
            const lengthChange = (inseam - 75) * 1.2;
            leftLeg.setAttribute('height', baseLength + lengthChange);
            rightLeg.setAttribute('height', baseLength + lengthChange);
        }
        
        // Add event listeners
        heightSlider.addEventListener('input', updateHeight);
        chestSlider.addEventListener('input', updateChest);
        waistSlider.addEventListener('input', updateWaist);
        hipSlider.addEventListener('input', updateHip);
        shoulderSlider.addEventListener('input', updateShoulder);
        inseamSlider.addEventListener('input', updateInseam);
        
        // Function to fetch dress recommendations
        async function fetchDressRecommendations(size) {
            try {
                const response = await fetch(`http://localhost:5000/users/getSizeDress/${size}`);
                console.log(response);
                if (!response.ok) {
                    throw new Error('Failed to fetch dress recommendations');
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching dress recommendations:', error);
                return { error: 'Failed to load dress recommendations' };
            }
        }
        
        // Function to display dress recommendations
        function displayDressRecommendations(dresses) {
            const dressContainer = document.getElementById('dress-container');
            const dressContent = document.getElementById('dress-content');
            
            // Clear previous content
            dressContent.innerHTML = '';
            
            if (dresses.error) {
                dressContent.innerHTML = `<p>Error: ${dresses.error}</p>`;
            } else if (dresses.length === 0) {
                dressContent.innerHTML = '<p>No dress recommendations found for your size.</p>';
            } else {
                // Display each dress
                dresses.forEach(dress => {
                    const dressElement = document.createElement('div');
                    dressElement.className = 'dress-item';
                    
                    dressElement.innerHTML = `
                        <img src="/images/product/${dress._id}.jpg" alt="${dress.name}" class="dress-image">
                        <div class="dress-info">
                            <h4>${dress.productName}</h4>
                            <p>${dress.description || 'No description available'}</p>
                            <p>Size: ${dress.size}</p>
                            <p>Price: RS.${dress.price || 'N/A'}</p>
                        </div>
                    `;
                    
                    dressContent.appendChild(dressElement);
                });
            }
            
            dressContainer.style.display = 'block';
        }
        
        // Submit button event
        document.getElementById('submit-btn').addEventListener('click', async function() {
            const resultsContainer = document.getElementById('results-container');
            const resultsContent = document.getElementById('results-content');
            const loadingIndicator = document.getElementById('loading-indicator');
            
            // Calculate shirt size
            let shirtSize = "M";
            const chest = parseInt(chestSlider.value);
            if (chest < 85) shirtSize = "S";
            else if (chest < 95) shirtSize = "M";
            else if (chest < 105) shirtSize = "L";
            else if (chest < 115) shirtSize = "XL";
            else shirtSize = "XXL";
            
            // Calculate pants size
            let pantsSize = "32";
            const waist = parseInt(waistSlider.value);
            if (waist < 70) pantsSize = "28";
            else if (waist < 75) pantsSize = "30";
            else if (waist < 85) pantsSize = "32";
            else if (waist < 95) pantsSize = "34";
            else if (waist < 105) pantsSize = "36";
            else pantsSize = "38+";
            
            // Display results
            resultsContent.innerHTML = `
                <p><strong>Height:</strong> ${heightSlider.value} cm</p>
                <p><strong>Chest:</strong> ${chestSlider.value} cm (Estimated shirt size: ${shirtSize})</p>
                <p><strong>Waist:</strong> ${waistSlider.value} cm (Estimated pants size: ${pantsSize})</p>
                <p><strong>Hip:</strong> ${hipSlider.value} cm</p>
                <p><strong>Shoulder Width:</strong> ${shoulderSlider.value} cm</p>
                <p><strong>Inseam:</strong> ${inseamSlider.value} cm</p>
            `;
            
            resultsContainer.style.display = 'block';
            
            // Fetch dress recommendations based on shirt size
            loadingIndicator.style.display = 'block';
            const dresses = await fetchDressRecommendations(shirtSize);
            loadingIndicator.style.display = 'none';
            
            // Display dress recommendations
            displayDressRecommendations(dresses);
        });
        
        // Initialize
        updateHeight();
        updateChest();
        updateWaist();
        updateHip();
        updateShoulder();
        updateInseam();
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128/examples/js/loaders/GLTFLoader.js"></script>
<div id="3d-container" style="width: 100%; height: 400px;"></div>
<script>
    let scene, camera, renderer, model;

    function init3D() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000);
        camera.position.set(0, 1.5, 3);
        renderer = new THREE.WebGLRenderer({ alpha: true });
        renderer.setSize(300, 400);
        document.getElementById("3d-container").appendChild(renderer.domElement);

        const light = new THREE.AmbientLight(0xffffff, 1);
        scene.add(light);

        const loader = new THREE.GLTFLoader();
        loader.load("models/human.glb", function (gltf) {
            model = gltf.scene;
            scene.add(model);
            animate();
        });
    }

    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }

    init3D();
</script>

</body>
</html>